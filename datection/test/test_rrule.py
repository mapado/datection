# -*- coding: utf-8 -*-

"""
Test the generation of recurrence rules during the normalisation process
of a timepoint
"""

import unittest
import datetime

from dateutil.rrule import *

from datection import parse
from datection.normalize import *
from datection.utils import makerrulestr


class TestDateRecurrence(unittest.TestCase):
    """ Test the generation of recurrence rules for datection Date objects """

    def setUp(self):
        lang = 'fr'
        text = "Le 25 janvier 2013"
        self.date = parse(text, lang)[0]

    def test_to_rrule(self):
        """ Test the format of the recurrence rule string """
        rrulestr = self.date.rrulestr
        start = datetime.date(2013, 1, 25)
        end = start
        target = makerrulestr(start, end, count=1, byhour=0, byminute=0)
        self.assertEqual(rrulestr, target)

    def test_to_db(self):
        """ Test the format returned by the 'to_db' Date method """
        target = {
            'rrule': self.date.rrulestr,
            'duration': 1439
        }
        self.assertEqual(self.date.to_db(), target)

    def test_datetime_generation(self):
        """ Test the format the dates generated by the recurrence rule """
        target = [datetime.datetime(2013, 1, 25, 0, 0)]
        self.assertEqual(list(rrulestr(self.date.rrulestr)), target)


class TestDateListRecurrence(unittest.TestCase):
    """ Test the generation of recurrence rules for datection DateList objects

    """
    def setUp(self):
        lang = 'fr'
        text = "Le 25, 26 janvier 2013"
        self.datelist = parse(text, lang)[0]

    def test_to_db(self):
        """ Test the format returned by the 'to_db' DateList method """
        target = [
            {
                'rrule': self.datelist.dates[0].rrulestr,
                'duration': 1439
            },
            {
                'rrule': self.datelist.dates[1].rrulestr,
                'duration': 1439
            }
        ]
        self.assertEqual(self.datelist.to_db(), target)


class TestDateIntervalRecurrence(unittest.TestCase):
    """ Test the generation of recurrence rules for datection
        DateInterval objects

    """
    def setUp(self):
        lang = 'fr'
        text = "du 25 au 30 mars 2013"
        self.interval = parse(text, lang)[0]

    def test_to_rrule(self):
        """ Test the format of the recurrence rule string """
        rrulestr = self.interval.rrulestr
        start = datetime.date(2013, 3, 25)
        end = datetime.date(2013, 3, 30)
        target = makerrulestr(start, end, interval=1, byhour=0, byminute=0)
        self.assertEqual(rrulestr, target)

    def test_to_db(self):
        """ Test the format returned by the 'to_db' Date method """
        target = {
            'rrule': self.interval.rrulestr,
            'duration': 1439
        }
        self.assertEqual(self.interval.to_db(), target)

    def test_datetime_generation(self):
        """ Test the format the dates generated by the recurrence rule """
        target = [
            datetime.datetime(2013, 3, 25, 0, 0),
            datetime.datetime(2013, 3, 26, 0, 0),
            datetime.datetime(2013, 3, 27, 0, 0),
            datetime.datetime(2013, 3, 28, 0, 0),
            datetime.datetime(2013, 3, 29, 0, 0),
            datetime.datetime(2013, 3, 30, 0, 0),
        ]
        self.assertEqual(list(rrulestr(self.interval.rrulestr)), target)


class TestDateTimeRecurrence(unittest.TestCase):
    """ Test the generation of recurrence rules for datection
        DateTime objects

    """
    def setUp(self):
        self.lang = 'fr'
        text = "Le 30 mars 2013 à 15h30"
        self.datetime = parse(text, self.lang)[0]

    def test_to_rrule(self):
        """ Test the format of the recurrence rule string """
        rrulestr = self.datetime.rrulestr
        start = datetime.date(2013, 3, 30)
        target = makerrulestr(start, count=1, byhour=15, byminute=30)
        self.assertEqual(rrulestr, target)

    def test_to_db(self):
        """ Test the format returned by the 'to_db' Date method """
        target = {
            'rrule': self.datetime.rrulestr,
            'duration': 0
        }
        self.assertEqual(self.datetime.to_db(), target)

    def test_datetime_generation(self):
        """ Test the format the dates generated by the recurrence rule """
        target = [datetime.datetime(2013, 3, 30, 15, 30)]
        self.assertEqual(list(rrulestr(self.datetime.rrulestr)), target)

    def test_to_rrule_with_endtime(self):
        """ Test the format of the recurrence rule string when the
            datetime specified an end time.

        """
        text = "Le 30 mars 2013 de 12h à 15h30"
        dt = parse(text, self.lang)[0]
        rrulestr = dt.rrulestr
        start = datetime.date(2013, 3, 30)
        target = makerrulestr(start, count=1, byhour=12, byminute=0)
        self.assertEqual(rrulestr, target)

    def test_to_db_with_endtime(self):
        """ Test the format returned by the 'to_db' Date method """
        text = "Le 30 mars 2013 de 12h à 15h30"
        dt = parse(text, self.lang)[0]
        target = {
            'rrule': dt.rrulestr,
            'duration': 210
        }
        self.assertEqual(dt.to_db(), target)


class TestDateTimeIntervalRecurrence(unittest.TestCase):
    """ Test the generation of recurrence rules for datection
        DateInterval objects

    """
    def setUp(self):
        self.lang = 'fr'
        text = "du 25 au 30 mars 2013 de 15h à 16h"
        self.interval = parse(text, self.lang)[0]

    def test_to_rrule(self):
        """ Test the format of the recurrence rule string """
        rrulestr = self.interval.rrulestr
        start = datetime.datetime(2013, 3, 25, 15, 0)
        end = datetime.datetime(2013, 3, 30, 16, 0)
        target = makerrulestr(start, end, interval=1, byhour=15, byminute=0)
        self.assertEqual(rrulestr, target)

    def test_to_db(self):
        """ Test the format returned by the 'to_db' Date method """
        target = {
            'rrule': self.interval.rrulestr,
            'duration': 60
        }
        self.assertEqual(self.interval.to_db(), target)

    def test_datetime_generation(self):
        """ Test the format the dates generated by the recurrence rule """
        target = [
            datetime.datetime(2013, 3, 25, 15, 0),
            datetime.datetime(2013, 3, 26, 15, 0),
            datetime.datetime(2013, 3, 27, 15, 0),
            datetime.datetime(2013, 3, 28, 15, 0),
            datetime.datetime(2013, 3, 29, 15, 0),
            datetime.datetime(2013, 3, 30, 15, 0),
        ]
        self.assertEqual(list(rrulestr(self.interval.rrulestr)), target)

    def test_to_rrule_no_endtime(self):
        """ Test the format of the recurrence rule string """
        text = "du 25 au 30 mars 2013 à 15h"
        interval = parse(text, self.lang)[0]
        rrulestr = interval.rrulestr
        start = datetime.datetime(2013, 3, 25, 15, 0)
        end = datetime.datetime(2013, 3, 30, 15, 0)
        target = makerrulestr(start, end, interval=1, byhour=15, byminute=0)
        self.assertEqual(rrulestr, target)

    def test_to_db_no_endtime(self):
        """ Test the format returned by the 'to_db' Date method """
        text = "du 25 au 30 mars 2013 à 15h"
        interval = parse(text, self.lang)[0]
        target = {
            'rrule': interval.rrulestr,
            'duration': 0
        }
        self.assertEqual(interval.to_db(), target)

    def test_datetime_generation_no_endtime(self):
        """ Test the format the dates generated by the recurrence rule """
        text = "du 25 au 30 mars 2013 à 15h"
        interval = parse(text, self.lang)[0]
        target = [
            datetime.datetime(2013, 3, 25, 15, 0),
            datetime.datetime(2013, 3, 26, 15, 0),
            datetime.datetime(2013, 3, 27, 15, 0),
            datetime.datetime(2013, 3, 28, 15, 0),
            datetime.datetime(2013, 3, 29, 15, 0),
            datetime.datetime(2013, 3, 30, 15, 0),
        ]
        self.assertEqual(list(rrulestr(interval.rrulestr)), target)
