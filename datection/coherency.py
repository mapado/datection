# -*- coding: utf-8 -*-

"""Definition of utilities ensuring the coherency of a series of
Timepoint objects. The Timepoints bringing redundancy will be removed.

"""

from datetime import datetime

from datection.timepoint import AbstractDate
from datection.timepoint import AbstractDateInterval


class TimepointCoherencyFilter(object):

    """Object in charge of removing Timepoints from a list when it only
    bring redundant information.

    """

    def __init__(self, timepoints):
        self.timepoints = timepoints

    @property
    def date_intervals(self):
        """The list of all date(time) intervals instances among the
        timepoint list.

        """
        return [
            t for t in self.timepoints
            if isinstance(t, AbstractDateInterval)]

    @property
    def dates(self):
        """The list of all date(time) instances among the timepoint list.

        """
        return [t for t in self.timepoints if isinstance(t, AbstractDate)]

    def deduplicate_date_interval_and_dates(self):
        """Remove the date intervals which dates are all re-defined by
        other independant dates in the timepoint list.

        Example:
        >>> timepoints = [
            <DateInterval: 2015/03/02 - 2015/03/03>,
            Date(2015, 03, 02),
            Date(2015, 03, 03)]
        >>> cf = CoherencyFilter(timepoints)
        >>> cf.deduplicate_date_interval_and_dates()
        >>> cf.timepoints
        [Date(2015, 03, 02), Date(2015, 03, 03)]

        """
        timepoints = self.timepoints[:]
        indep_generated_dates = (d.to_python() for d in self.dates)
        indep_generated_dates = [
            (d.date() if isinstance(d, datetime) else d)
            for d in indep_generated_dates]

        # Remove an interval from the timepoints if all its dates are
        # already generated by simple dates
        for interval in self.date_intervals:
            if all([d in indep_generated_dates for d in interval.to_python()]):
                timepoints.remove(interval)
        self.timepoints = timepoints

    def apply_coherency_rules(self):
        """Call every coherency rules."""
        self.deduplicate_date_interval_and_dates()
        return self.timepoints
